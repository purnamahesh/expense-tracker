name: Pre-Release

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: pre-release-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  check-comment:
    # Only run on PR comments
    if: github.event.issue.pull_request
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      prerelease_type: ${{ steps.check.outputs.prerelease_type }}
      pr_number: ${{ github.event.issue.number }}
      comment_id: ${{ github.event.comment.id }}

    steps:
      - name: Check if comment is pre-release command
        id: check
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          # Sanitize input: only allow specific patterns to prevent command injection
          # Match /pre-release --type=alpha or /pre-release --type=beta exactly
          if printf '%s' "$COMMENT_BODY" | grep -qE "^/pre-release[[:space:]]+--type=(alpha|beta)[[:space:]]*$"; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            PRERELEASE_TYPE=$(printf '%s' "$COMMENT_BODY" | grep -oE "(alpha|beta)")
            echo "prerelease_type=$PRERELEASE_TYPE" >> $GITHUB_OUTPUT
            echo "Detected pre-release command: $PRERELEASE_TYPE"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "Not a pre-release command"
          fi

  check-rust-changes:
    needs: check-comment
    if: needs.check-comment.outputs.should_run == 'true'
    runs-on: ubuntu-latest

    outputs:
      has_changes: ${{ steps.rust_changes.outputs.has_changes }}
      pr_ref: ${{ steps.pr.outputs.ref }}

    steps:
      - name: Get PR branch
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.check-comment.outputs.pr_number }}
            });
            core.setOutput('ref', pr.data.head.ref);
            core.setOutput('sha', pr.data.head.sha);
            return pr.data.head.ref;

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Rust file changes in PR
        id: rust_changes
        run: |
          # Get the base branch (main or master)
          BASE_BRANCH=$(git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | xargs)

          # Fetch the base branch
          git fetch origin $BASE_BRANCH

          # Check if any .rs files changed in this PR
          CHANGED_RS_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD | grep '\.rs$' || true)

          if [ -n "$CHANGED_RS_FILES" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Rust files changed in this PR:"
            echo "$CHANGED_RS_FILES"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No Rust files changed in this PR"
          fi

      - name: Skip pre-release comment
        if: steps.rust_changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.check-comment.outputs.pr_number }},
              body: '⏭️ **Skipping pre-release** - No Rust file changes detected in this PR'
            });

  bump-and-publish:
    needs: [check-comment, check-rust-changes]
    if: needs.check-rust-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-rust-changes.outputs.pr_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Cache cargo-bump
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-bump
          key: ${{ runner.os }}-cargo-bump-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-bump
        run: |
          if ! command -v cargo-bump &> /dev/null; then
            cargo install cargo-bump
          else
            echo "cargo-bump already installed"
          fi

      - name: Bump to pre-release version
        id: version
        run: |
          echo "Current version:"
          CURRENT_VERSION=$(grep -m1 '^version' Cargo.toml | cut -d'"' -f2)
          echo "$CURRENT_VERSION"

          PRERELEASE_TYPE="${{ needs.check-comment.outputs.prerelease_type }}"

          # Set suffix based on type (a for alpha, b for beta)
          if [ "$PRERELEASE_TYPE" = "alpha" ]; then
            SUFFIX="a"
          else
            SUFFIX="b"
          fi

          # Check if already a pre-release version with same type
          if echo "$CURRENT_VERSION" | grep -qE "${SUFFIX}[0-9]+$"; then
            # Extract base version and current pre-release number
            BASE_VERSION=$(echo "$CURRENT_VERSION" | sed -E "s/${SUFFIX}[0-9]+$//")
            CURRENT_NUM=$(echo "$CURRENT_VERSION" | grep -oE "[0-9]+$")
            NEW_NUM=$((CURRENT_NUM + 1))
            NEW_VERSION="${BASE_VERSION}${SUFFIX}${NEW_NUM}"
          else
            # Check if it's a different pre-release type (switch from a to b or vice versa)
            if echo "$CURRENT_VERSION" | grep -qE "[ab][0-9]+$"; then
              # Remove old pre-release suffix
              BASE_VERSION=$(echo "$CURRENT_VERSION" | sed -E "s/[ab][0-9]+$//")
              NEW_VERSION="${BASE_VERSION}${SUFFIX}0"
            else
              # Not a pre-release, bump patch and add suffix
              cargo bump patch
              BASE_VERSION=$(grep -m1 '^version' Cargo.toml | cut -d'"' -f2)
              NEW_VERSION="${BASE_VERSION}${SUFFIX}0"
            fi
          fi

          # Update Cargo.toml with pre-release version (portable sed)
          if [ "$(uname)" = "Darwin" ]; then
            # macOS requires explicit backup extension
            sed -i '' "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          else
            # Linux doesn't require it
            sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          fi

          echo "New version: $NEW_VERSION"

          # Update Cargo.lock with new version
          PACKAGE_NAME=$(cargo pkgid | cut -d# -f1 | rev | cut -d/ -f1 | rev)
          cargo update -p "$PACKAGE_NAME" --quiet

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump to PR branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Cargo.toml Cargo.lock
          git commit -m "chore: bump version to $NEW_VERSION for pre-release"
          git push origin ${{ needs.check-rust-changes.outputs.pr_ref }}

      - name: Create tag for version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Verify package before publish
        run: cargo publish --dry-run
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  comment-and-react:
    needs: [check-comment, bump-and-publish]
    if: needs.check-comment.outputs.should_run == 'true' && needs.bump-and-publish.outputs.new_version != ''
    runs-on: ubuntu-latest

    steps:
      - name: Add comment to PR
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ needs.bump-and-publish.outputs.new_version }}';
            const prereleaseType = '${{ needs.check-comment.outputs.prerelease_type }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.check-comment.outputs.pr_number }},
              body: `## 🚀 Pre-release Published\n\n**Version:** \`${newVersion}\`\n**Type:** ${prereleaseType}\n\nSuccessfully published to [crates.io](https://crates.io/crates/${{ github.event.repository.name }})!\n\nThe version has been bumped and committed to this PR branch.\n\n### Install this version:\n\`\`\`bash\ncargo install ${{ github.event.repository.name }} --version ${newVersion}\n\`\`\``
            });

      - name: Add thumbs up reaction to trigger comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ needs.check-comment.outputs.comment_id }},
              content: '+1'
            });

  handle-failure:
    needs: [check-comment, bump-and-publish]
    if: failure() && needs.check-comment.outputs.should_run == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Add failure comment to PR
        uses: actions/github-script@v7
        with:
          script: |
            const prereleaseType = '${{ needs.check-comment.outputs.prerelease_type }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.check-comment.outputs.pr_number }},
              body: `## ❌ Pre-release Failed\n\n**Type:** ${prereleaseType}\n\nFailed to publish pre-release. Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
            });

      - name: Add thumbs down reaction to trigger comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ needs.check-comment.outputs.comment_id }},
              content: '-1'
            });
