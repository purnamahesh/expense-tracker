name: Release

on:
  push:
    branches:
      - main
      - master

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-rust-changes:
    runs-on: ubuntu-latest

    # Prevent infinite loops from version bump commits
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    outputs:
      has_changes: ${{ steps.rust_changes.outputs.has_changes }}
      bump_type: ${{ steps.semver.outputs.bump }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Rust file changes
        id: rust_changes
        run: |
          # Get commits since last tag or all commits if no tags exist
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            # No tags exist, check if any .rs files exist
            RS_FILES=$(find . -name "*.rs" -type f | wc -l)
            if [ "$RS_FILES" -gt 0 ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Found Rust files in repository"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No Rust files found"
            fi
          else
            # Check if any .rs files changed since last tag
            CHANGED_RS_FILES=$(git diff --name-only ${LAST_TAG}..HEAD | grep '\.rs$' || true)

            if [ -n "$CHANGED_RS_FILES" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Rust files changed since ${LAST_TAG}:"
              echo "$CHANGED_RS_FILES"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No Rust files changed since ${LAST_TAG}"
            fi
          fi

      - name: Skip release message
        if: steps.rust_changes.outputs.has_changes == 'false'
        run: |
          echo "⏭️ Skipping release - no Rust file changes detected"
          exit 0

      - name: Determine version bump type
        if: steps.rust_changes.outputs.has_changes == 'true'
        id: semver
        run: |
          # Get commits since last tag or all commits if no tags exist
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"
          echo ""

          # Determine bump type based on conventional commits
          if echo "$COMMITS" | grep -qE "^(BREAKING CHANGE:|.*!:)"; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "Detected MAJOR bump (breaking change)"
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "Detected MINOR bump (new feature)"
          elif echo "$COMMITS" | grep -qE "^fix(\(.+\))?:"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Detected PATCH bump (bug fix)"
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Defaulting to PATCH bump"
          fi

  bump-version:
    needs: check-rust-changes
    if: needs.check-rust-changes.outputs.has_changes == 'true'
    uses: ./.github/workflows/bump-version.yml
    permissions:
      contents: write
      pull-requests: write
    with:
      bump_type: ${{ needs.check-rust-changes.outputs.bump_type }}
      source_ref: ${{ github.ref_name }}
      pr_title_prefix: release

  publish:
    runs-on: ubuntu-latest
    needs: bump-version
    if: needs.bump-version.outputs.new_version != ''

    steps:
      - name: Wait for version bump PR to be merged
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.bump-version.outputs.pr_number }};
            const maxAttempts = 60; // Wait up to 5 minutes
            const delay = 5000; // 5 seconds between checks

            for (let i = 0; i < maxAttempts; i++) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              if (pr.data.merged) {
                console.log(`PR #${prNumber} has been merged!`);
                return;
              }

              if (pr.data.state === 'closed' && !pr.data.merged) {
                throw new Error(`PR #${prNumber} was closed without merging`);
              }

              console.log(`Waiting for PR #${prNumber} to be merged... (${i + 1}/${maxAttempts})`);
              await new Promise(resolve => setTimeout(resolve, delay));
            }

            throw new Error(`Timeout waiting for PR #${prNumber} to be merged`);

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Create tag for version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${{ needs.bump-version.outputs.new_version }}"
          git push origin "v${{ needs.bump-version.outputs.new_version }}"

      - name: Verify package before publish
        run: cargo publish --dry-run
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
