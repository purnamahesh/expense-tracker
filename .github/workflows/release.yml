name: Release

on:
  push:
    branches:
      - main
      - master

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  bump-version:
    runs-on: ubuntu-latest

    # Prevent infinite loops from version bump commits
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Rust file changes
        id: rust_changes
        run: |
          # Get commits since last tag or all commits if no tags exist
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            # No tags exist, check if any .rs files exist
            RS_FILES=$(find . -name "*.rs" -type f | wc -l)
            if [ "$RS_FILES" -gt 0 ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Found Rust files in repository"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No Rust files found"
            fi
          else
            # Check if any .rs files changed since last tag
            CHANGED_RS_FILES=$(git diff --name-only ${LAST_TAG}..HEAD | grep '\.rs$' || true)

            if [ -n "$CHANGED_RS_FILES" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Rust files changed since ${LAST_TAG}:"
              echo "$CHANGED_RS_FILES"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No Rust files changed since ${LAST_TAG}"
            fi
          fi

      - name: Skip release message
        if: steps.rust_changes.outputs.has_changes == 'false'
        run: |
          echo "⏭️ Skipping release - no Rust file changes detected"
          exit 0

      - name: Set up Rust
        if: steps.rust_changes.outputs.has_changes == 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Cache cargo-bump
        if: steps.rust_changes.outputs.has_changes == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-bump
          key: ${{ runner.os }}-cargo-bump-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-bump
        if: steps.rust_changes.outputs.has_changes == 'true'
        run: |
          if ! command -v cargo-bump &> /dev/null; then
            cargo install cargo-bump
          else
            echo "cargo-bump already installed"
          fi

      - name: Determine version bump type
        if: steps.rust_changes.outputs.has_changes == 'true'
        id: semver
        run: |
          # Get commits since last tag or all commits if no tags exist
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"
          echo ""

          # Determine bump type based on conventional commits
          if echo "$COMMITS" | grep -qE "^(BREAKING CHANGE:|.*!:)"; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "Detected MAJOR bump (breaking change)"
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "Detected MINOR bump (new feature)"
          elif echo "$COMMITS" | grep -qE "^fix(\(.+\))?:"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Detected PATCH bump (bug fix)"
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Defaulting to PATCH bump"
          fi

      - name: Bump version in Cargo.toml
        if: steps.rust_changes.outputs.has_changes == 'true'
        id: version
        run: |
          echo "Current version:"
          grep "^version" Cargo.toml | head -1

          cargo bump ${{ steps.semver.outputs.bump }}

          echo "New version:"
          grep "^version" Cargo.toml | head -1

          NEW_VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)

          # Update Cargo.lock with new version
          PACKAGE_NAME=$(cargo pkgid | cut -d# -f1 | rev | cut -d/ -f1 | rev)
          cargo update -p "$PACKAGE_NAME" --quiet

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        if: steps.rust_changes.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Cargo.toml Cargo.lock
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"

      - name: Push changes and tags
        if: steps.rust_changes.outputs.has_changes == 'true'
        run: |
          git push origin ${{ github.ref_name }}
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: bump-version
    if: needs.bump-version.outputs.new_version != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Verify package before publish
        run: cargo publish --dry-run
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
