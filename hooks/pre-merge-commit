#!/bin/bash

# Pre-merge-commit hook
# Automatically bumps version when merging into main or master branch
# This hook runs before a merge commit is created

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the current branch
CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null)

# Only run on main/master branch
if [[ "$CURRENT_BRANCH" != "main" && "$CURRENT_BRANCH" != "master" ]]; then
    exit 0
fi

# Check if this is a merge commit
if ! git rev-parse -q --verify MERGE_HEAD >/dev/null 2>&1; then
    exit 0
fi

echo -e "${BLUE}Pre-merge-commit hook: Detected merge into $CURRENT_BRANCH${NC}"

# Check if cargo-bump is installed
if ! command -v cargo-bump &> /dev/null; then
    echo -e "${YELLOW}Warning: cargo-bump not installed. Skipping automatic version bump.${NC}"
    echo "Install with: cargo install cargo-bump"
    exit 0
fi

# Check if Cargo.toml exists
if [ ! -f "Cargo.toml" ]; then
    echo -e "${YELLOW}Warning: Cargo.toml not found. Skipping version bump.${NC}"
    exit 0
fi

# Get commits being merged
MERGE_BASE=$(git merge-base HEAD MERGE_HEAD)
MERGE_COMMITS=$(git log --format=%s "$MERGE_BASE..MERGE_HEAD")

# Analyze commits for version bump type
BUMP_TYPE="patch"  # default

if echo "$MERGE_COMMITS" | grep -qE "^(feat!|fix!|refactor!|perf!|BREAKING CHANGE)"; then
    BUMP_TYPE="major"
    echo -e "${GREEN}Detected breaking changes → MAJOR version bump${NC}"
elif echo "$MERGE_COMMITS" | grep -qE "^feat"; then
    BUMP_TYPE="minor"
    echo -e "${GREEN}Detected new features → MINOR version bump${NC}"
elif echo "$MERGE_COMMITS" | grep -qE "^(fix|patch)"; then
    BUMP_TYPE="patch"
    echo -e "${GREEN}Detected fixes/patches → PATCH version bump${NC}"
else
    BUMP_TYPE="patch"
    echo -e "${GREEN}No specific type detected → PATCH version bump (default)${NC}"
fi

# Get current version
CURRENT_VERSION=$(grep -E "^version = " Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
echo -e "${BLUE}Current version: ${CURRENT_VERSION}${NC}"

# Bump version
echo -e "${BLUE}Bumping ${BUMP_TYPE} version...${NC}"
if cargo-bump bump "$BUMP_TYPE" 2>&1; then
    # Update Cargo.lock
    cargo update --workspace 2>&1 > /dev/null || true

    # Get new version
    NEW_VERSION=$(grep -E "^version = " Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
    echo -e "${GREEN}✓ Version bumped: ${CURRENT_VERSION} → ${NEW_VERSION}${NC}"

    # Stage the updated files
    git add Cargo.toml Cargo.lock 2>/dev/null || true

    echo -e "${GREEN}✓ Cargo.toml and Cargo.lock staged for commit${NC}"
else
    echo -e "${RED}✗ Failed to bump version${NC}"
    exit 1
fi

exit 0
